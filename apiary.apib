AuthentFORMAT: 1A
HOST: https://api.swarms.tech

# SWARMS API

Our API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer).
It has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors. 
HTTP requests will be forwared to HTTPS. We support cross-origin 
resource sharing, allowing you to interact securely with our API from a client-side application.
All API responses, including errors, will return JSON.


### Authentication

You authenticate by including an API token in the `X-Auth-Token` header of the requests. You
can request and discard the token with your credentials using the endpoints documented in
the [Auth Token section](/reference/auth-token).

As we are currently in a beta phase, you cannot signup on your own to our platform. If you want to
create your account, please send us an email to <a href="mailto:info@swarms.tech?Subject=Signup as JobProvider" target="_top">info@swarms.tech</a>.


### Errors

For errors the common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.
The body of the reponse will contain an error `code` and a `message` as well as a user friendly `description` like:

```
{
    "code": 1000,
    "message": "invalid credentials",
    "description": "The given credentials did not match any user in our database"
}
```

Each response will contain a `X-Request-ID` header with an UUID identifying that request. In case you encounter
weird behaviour, please <a href="mailto:info@swarms.tech?Subject=Error for request: <Request ID>" target="_top">send us an email</a>
and include the request id in your message.


### Versioning

Our API is versioned in a `major.minor` format. You can specify the version to use by setting the 
`X-API-Version` header in the requests. If this header is not present, it will default to the latest
version. The response will also include the used API version in the `X-API-Version` header.
The current API version is `1.0`.


### Time Formatting

Timestamps are returned in [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) timezone and formatted
accoring to the `ISO-8601` standard, as in `2017-08-02T13:58:24`.


### Feedback

Our API docs are [hosted on GitHub](https://github.com/swarms/api-doc). We appreciate your
feedback in issues in the repository or via email at <a href="mailto:info@swarms.tech?Subject=API Feedback" target="_top">info@swarms.tech</a>. 


## Group Auth Token

In order to access and manage your resources via the API, you need to send an API token in the `X-Auth-Token`
header of your requests. You can can requests an auth token with your credentials.

### Request an auth token [POST /auth/token/request]

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
        
    + Body

            {
                "email": "me@example.com",
                "password": "password"
            }

+ Response 200 (application/json)

        {
            "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxLUlVdVpWSTRKcDFSOVlTTGFOUHBGOVFcL1kwcU95TG10RGt0TE5WaG5GV0hSNDBMTklkZzN4TVAyZ0NrT0N3YzhYQ1Q4cmZsZlprcVhOeE1VQzlaZ3RVRFZnU1dBOXBOVW04MWlhIiwiaXNzIjoia3dpcXByb3ZpZGVyIiwiZXhwIjoxNTA4OTI0NDAwLCJpYXQiOjE1MDYzMzI0MDAsImp0aSI6ImEwMWNmYTBkZjJlYjI2NWYzOTQ1NTkxYmMyOGY3MWEzNTg5ZDE3NjZlYmI4MmRhYTBjYTFhOGIwNzJkNzI1ODk0OWJmOTZkMTUyOTJjNTFmYWNmNGFkZDNkMDZjMDQ2YjExYmRjNmI2Yjc2YTYwNmZkN2JmMTI2MzQ4NWZhZGNhYzU0NjExMTU2NGNhNGNiMjhiZTg5MGNlNDY5MjMyY2QyNmI5ZmIzMTdhZTVhZmQ1NjE0NWQzOGExODg1MzdkZTUxMDMxYWQwYmY4YTY3YjNlNzVjMzkwNTVkZDUxNTQzZDY0ODNkNzc4OGEwOTQwMWY4YWQ0MjEyNTNhYmI3ZDEifQ.AzOxuj3DBELmFyphOJQxAlodA3PzDeBN6x4G5qO1H5s",
            "expiresAt": "2017-10-25T09:40:00",
            "userId": 42
        }

### Discard an auth token [POST /auth/token/discard]

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

## Group Profile

## The Profile object [/me]

+ Attributes (RESPONSEProfile)

### Get your Profile [GET /me]

+ Request

    + Headers
        
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEProfile)
    

### Update your Profile [PUT /me]

+ Request (application/json)

    + Attributes (REQUESTProfile)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEProfile)

## Group Task

A `Task` is the unit of work that is displayed in a cohesive view on a mobile device. It consists of several
`Components` which can be _interactive_ (like a `TextInput`) or _non-interactive_ (like an `Image`).
Interactive components will produce results while the non-interactive ones won't. For an overview of all
available components check out the [Components Overview](reference/components-overview).

## The task object [/tasks]

+ Attributes (RESPONSETask)

### List all Tasks [GET /tasks{?order}{?limit}{?search}{?before}{?after}]

+ Parameters

    + order (array[string], optional)
        
        + Members
            
            + id
            
            + name
            
            + lastModifiedAt
            
            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.
    
    + search (string, optional) - search for full word matches
    
    + before (number, optional) - fetch only elements before the one with this `id`
    
    + after (number, optional) - fetch only elements after the one with this `id`

+ Request

    + Headers
        
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSETaskList)
    
### Get a single Task [GET /tasks/{id}]

+ Parameter

    + id (number) - id of the task

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSETask)

### Create a Task [POST]

+ Request (application/json)

    + Attributes (REQUESTTask)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSETask)
   
   
### Update a Task [PUT /tasks/{id}]

+ Parameter

    + id (number) - id of the task

+ Request (application/json)

    + Attributes (REQUESTTask)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSETask)
    
    
### Delete a Task [DELETE /tasks/{id}]

+ Parameter

    + id (number) - id of the task

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Copy a Task [POST /tasks/{id}/copy]

+ Parameter

    + id (number) - id of the task that should be copied

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSETask)
    
    
## Group Job

A `Job` is the unit of work a worker gets paid for. It is a sequence of `Tasks`.

## The job object [/jobs]

+ Attributes (RESPONSEJob)

### List all Jobs [GET /jobs{?order}{?limit}{?search}{?before}{?after}]

+ Parameters

    + order (array[string], optional)
        
        + Members
            
            + id
            
            + name
            
            + lastModifiedAt
            
            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.
    
    + search (string, optional) - search for full word matches
    
    + before (number, optional) - fetch only elements before the one with this `id`
    
    + after (number, optional) - fetch only elements after the one with this `id`

+ Request

    + Headers
        
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEJobList)
    
### Get a single Job [GET /jobs/{id}]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEJob)

### Create a Job [POST]

+ Request (application/json)

    + Attributes (REQUESTJob)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSEJob)
   
   
### Update a Job [PUT /jobs/{id}]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Attributes (REQUESTJob)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEJob)
    
    
### Delete a Job [DELETE /jobs/{id}]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Copy a Job [POST /jobs/{id}/copy{?deep}]

+ Parameters

    + id (number) - id of the job that should be copied
    
    + deep: false (boolean) - if `true`, included tasks will also be copied and linked to the job. If `false`, existing tasks for the orginial job will be linked to the new one.

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSEJob)

# Tasks of a Job [/jobs/{id}/tasks]

You can add, update and get the tasks of a job.

### List Tasks of a Job [GET /jobs/{id}/tasks]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

        + Attributes (array[number])


### Update Tasks of a Job [PUT /jobs/{id}/tasks]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Attributes (array[number])

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

## Group Campaign

A `Campaign` is a collection of `Jobs`. It defines under which conditions its jobs are published
to our job market. If you want to make a `Job` available to the workers, you first need to add it to 
a campaign first and publish this campaign to our Job Market.

## The campaign object [/campaigns]

+ Attributes (RESPONSECampaign)

### List all Campaigns [GET /campaigns{?order}{?limit}{?search}{?before}{?after}]

+ Parameters

    + order (array[string], optional)
        
        + Members
            
            + id
            
            + name
            
            + lastModifiedAt
            
            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.
    
    + search (string, optional) - search for full word matches
    
    + before (number, optional) - fetch only elements before the one with this `id`
    
    + after (number, optional) - fetch only elements after the one with this `id`

+ Request

    + Headers
        
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSECampaignList)
    

### Get a single Campaign [GET /campaigns/{id}]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSECampaign)

### Create a Campaign [POST]

+ Request (application/json)

    + Attributes (REQUESTCampaign)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSECampaign)
    
    
### Delete a Campaign [DELETE /camapigns/{id}]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Copy a Campaign [POST /campaigns/{id}/copy{?deep}]

+ Parameters

    + id (number) - id of the campaign that should be copied
    
    + deep: false (boolean) - if `true`, included jobs _and_ tasks will also be copied and linked to the campaign. If `false`, existing jobs and tasks for the orginial campaign will be linked to the new one.

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSECampaign)

# Jobs of a Campaign [/campaigns/{id}/jobs]

You can add, update and get the jobs of a campaign.

### List Jobs of a Campaign [GET /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

        + Attributes (array[number])

### Add Jobs to a Campaign [POST /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Attributes (array[number])

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Update Jobs of a Campaign [PUT /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Attributes (array[number])

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

# Campaign Lifecycle [/campaigns/{id}]

The `Campaign`s state manages the availability of it's jobs on our Job Market.

Initially, a `Campaign` is unpublished. After you added Jobs to it, you can `publish` it to our
Job Market which will set its state to `active`. When the `Campaign` is active, it's Jobs are
available on our Job Market and workers can work on them. 
You can `pause` an active Campaign and `continue` it afterwards. When all results for
a Campaign  have been generated, the Campaign's state is set to `finished`.

It is also possible to `cancel` a campaign after it has been published.

This lifecycle is also shown in the below drawing.

![test](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/CampaignStates+(1).svg)

### Publish a Campaign [POST /camapigns/{id}/publish]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Pause an active Campaign [POST /camapigns/{id}/pause]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Continue a paused Campaign [POST /camapigns/{id}/continue]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Cancel a published Campaign [POST /camapigns/{id}/cancel]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)


## Group Result

You can get the `Results` for Campaigns that have been published to our Job Market.
In the moment the Worker uploads the Results to our servers, your time to review the Results begins.
This time can be set by the `maxReviewTime` attribute of the `Campaign`.

You can `approve`, `reject` or `soft-reject` a Result during the review time.
If you `reject` a Result, the worker won't get paid and his reputation gets damaged.
With a `soft-reject`, you can ask a Worker to redo the Job. In contrast to a normal `reject` this
will have no effect on the Worker's reputation.

When the review time expires without any action, it will get `auto-approved`.

The Worker will only get paid at the moment his Results get `approved`.

## The result object [/results]

+ Attributes (RESPONSEJobResult)

### List all Results for a Campaign [GET /campaigns/{id}/results]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (array[RESPONSEJobResult])
    
### List all Results for a Campaign grouped by Workers [GET /campaigns/{id}/results/grouped-by-worker]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEResultByWorker)  
    
### List all Results for a Campaign grouped by Tasks [GET /campaigns/{id}/results/grouped-by-task]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEResultsByTask)  

### Approve a Result [POST /results/{id}/approve]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token
            
    + Attributes (REQUESTApprove)

+ Response 200 (application/json)

### Reject a Result [POST /results/{id}/reject]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token
        
    + Attributes (REQUESTReject)

+ Response 200 (application/json)

### Soft-reject a Result [POST /results/{id}/soft-reject]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token
            
    + Attributes (REQUESTSoftReject)

+ Response 200 (application/json)

    
# Group Components Overview

Here you can see the all currently supported components that you can use to build your Tasks.
The components will be displayed below each other in the Task.

**Interactive Components**
* AdvancedImageMarker
* BinaryChoice
* Rating
* SimpleImageMarker
* TextInput
* Toggle
* VideoRecording

**Non-Interactive Components**
* Image
* Video

# Interactive Components

Interactive Components require the Worker's input. These components will generate the Results that
can be fetched afterwards.



## AdvancedImageMarker

The `AdvancedImageMarker` let's the worker draw on an image. For that, he has a shifted marker
so that he does not draw with his fingertip directly and can better see what he's drawing. He
can adjust the size of that marker and also use it as an eraser. Rotating the phone will enable
a landscape mode. This version of the ImageMarker will allow the worker to draw more precisely
than with the `SimpleImageMarker` which in contrast is easier to use.

### Example

![AdvancedImageMarker](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/AdvancedImageMarker.gif)

This example uses the following input image and would generate the following result:

| input      | result    |
|:-----------|-----------|
| ![a](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/ImageMarkerSampleImage.png)  | ![AdvancedImageMarkerResult](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/AdvancedImageMarkerResult.png)|


### Attributes

| name       | type    | description |
|:-----------|-----------|-----------|
| `url`      | string  | url of the image |

### Result

| name   | type    | description                 |
|:-------|---------|-----------------------------|
| `url`  | string  | url of the drawing (as a `.png`) |




## BinaryCoice

A `BinaryChoice` will display two labelled buttons to the worker. The worker can only select 
one of them.

### Example

![BinaryChoice](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/BinaryChoice.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `option1`  | string  | label for first  button      |
| `option2`  | string  | label for the other button   |

### Result

| name              | type    | description     |
|:------------------|---------|-----------------|
| `selectedOption`  | string  | selected Option |



## Rating

A `Rating` component displays a simple Rating bar to the user. The worker must select at least one star.
You can define the number of stars and if the worker can also select half stars.

### Example

![Rating](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/Rating.gif)


### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `steps`      | number  | number of stars            |
| `halfSteps`      | boolean  | whether the worker can select half stars            |

### Result

| name      | type    | description     |
|:----------|---------|-----------------|
| `rating`  | number  | rating          |



## SimpleImageMarker

The `SimpleImageMarker` let's the worker draw with his fingertap on an image directy. He can zoom,
redo and undo his changes and also use the landscape mode for his drawings. This ImageMarker  will
be more efficient than the `AdvancedImageMarker` when the accuracy of the drawing is less important to you.

### Example

![SimpleImageMarker](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/SimpleImageMarker.gif)

This example uses the following input image and would generate the following result:

| input      | result |
|:-----------|--------|
| ![a](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/ImageMarkerSampleImage.png)  | ![SimpleImageMarkerResult](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/SimpleImageMarkerResult.png)|

 
### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |

### Result

| name   | type    | description                 |
|:-------|---------|-----------------------------|
| `url`  | string  | url of the drawing (as a `.png`) |



## TextInput

A `TextInput` will ask a worker for a short text input via keyboard. You can set a `hint` that is displayed
in the input field before the worker starts typing.

### Example

![textInput](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/TextInput.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `hint`      | string  | text of the input field before typing             |

### Result

| name    | type    | description     |
|:--------|---------|-----------------|
| `text`  | string  | the worker's input |



## Toggle

A `Toggle` can be used to ask for a simple `true`/`false` on a label. It can be set to be toggled by default.


### Example

![Toggle](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/Toggle.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `label`      | string  | label of the Toggle             |
| `checkedByDefault`      | boolean  | the initial state of the Toggle             |
| `explanation`      | string  | an explanation for the worker. Shown as a Popup.             |

### Result

| name       | type    | description     |
|:-----------|---------|-----------------|
| `checked`  | boolean | whether worker checked the Toggle |



## VideoRecording

### Example

### Attributes

| name                   | type    | description                          |
|:-----------------------|---------|--------------------------------------|
| `landscape`            | boolean | is the video wide and not tall?      |
| `minDurationInSeconds` | number  | minumum video duration               |
| `maxDurationInSeconds` | number  | maximum video duration               |

### Result

| name   | type    | description               |
|:-------|---------|---------------------------|
| `url`  | string  | url of the recorded video |



# Non-interactive Components

## Image

A simple image that is displayed in the Task.

### Exmaple

![Image](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/Image.png)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |



## Video

A video that is displayed in the Task. You can set whehther it should start and repeat automatically
and whether the audio should be played. The worker can pause and replay the video.

### Example

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the video             |
| `autoplay` | boolean | whether the video should start playing automatically |
| `repeat`   | boolean | whether the video should repeat automatically        |
| `audio`    | boolean | whther the audio should be played                    |



            
# Data Structures

## DefaultAttributes

+ id: 1 (number) - id of the resource
+ readOnly: false (boolean) - indicates whether the resource can be modified
+ lastModifiedAt: `2017-08-02T13:58:24` (string) - the datetime of the last modification of the resource.
+ createdAt: `2017-08-02T13:58:24` (string) - the datetime of the creation of the resource.

## REQUESTTask (object)

+ name: My first Task (string) - name of the task
+ components (array[REQUESTComponent]) - components of the task

## RESPONSETask (object)

+ include REQUESTTask
+ resourcesSize (string)
+ estimatedUploadSize (string)
+ Include DefaultAttributes

## REQUESTJob (object)

+ name: My first Job (string) - name of the job

## RESPONSEJob (object)

+ Include REQUESTJob
+ resourcesSize (string)
+ estimatedUploadSize (string)
+ Include DefaultAttributes

## REQUESTCampaign (object)

+ name: My first Campaign (string) - name of the campaign
+ title: Review model images (string) - title for jobs in this campaign on the job market
+ description: You will see 20 models images which you should rate on a 1 to 5 scale. (string, optional) - description for jobs in this campaign on the job market
+ terms: Don't tell anyone about this. (string, optional) - title for jobs in this campaign on the job market
+ estDuration: 10 sec (string) - estimated duration for jobs in this campaign
+ workerPayment: 0.01 (number) - payment (in USD) for workers who work on jobs in this campaign.
+ results: 3 (number) - number of results that should be generated for each job of the campaign
+ maxResultsPerWorker: 1 (number) - number of times a single worker can work on each job of the campaign
+ workerGroup: 1 (number, optional) - id of a workergroup to specify the workers that can work on jobs in this campaign
+ maxWorkTime: 10 min (string, optional) - time a worker has to work on a job of this campaign
+ maxUploadTime: 4 hours (string, optional) -  time a worker has to uplaod the results after finishing his work
+ maxReviewTime: 3 hours - (string, optional) - timeframe in which results can be (soft-) rejected before they get auto approved
+ training: false (boolean, optional) - if this campaign is a training for future jobs.

## RESPONSECampaign (object)

+ Include REQUESTCampaign
+ state (enum)
    + unpublished - The campaign has not been published yet
    + active - Jobs of this campaign are currently on our Job market
    + paused - The campaigns is currently paused, Workers cannot work on jobs
    + cancelled - The campaign has been cancelled
    + finished - The campaign is finished, all requested results have been generated
+ Include DefaultAttributes

## RESPONSETaskResult (object)
+ task (number)
+ startedAt (string)
+ completedAt (string)
+ componentResults (array[RESPONSEComponentResult])

## RESPONSEJobResult (object)

+ worker (number)
+ job (number)
+ startedAt (string)
+ completedAt (string)
+ state (enum)
    + InReview
    + Approved
    + Rejected
+ taskResults (array[RESPONSETaskResult])
+ id (number)

## ComponentData

+ One of

    + Properties
        + landscape (boolean)
        + minDurationInSeconds (number)
        + maxDurationInSeconds (number)
    + url (string)
    + hint (string)
    + text (string)
    + Properties
        + option1 (string)
        + option2 (string)
    + Properties
        + steps (number)
        + halfSetps (boolean)
    + Properties
        + min (number)
        + max (number)
        + steps (number)
        + start (number)
    + Properties
        + label (string)
        + checkedByDefault (boolean)
    + Properties
        + url (string)
        + autoplay (boolean)
        + repeat (boolean)


## REQUESTComponent (object)

+ type (enum) - depending on the type, different values must be set
    + BinaryChoice (string)
    + Image (string)
    + ImageMarker (string)
    + Instruction (string)
    + Question (string)
    + Rating (string)
    + Stepper (string)
    + TextInput (string)
    + Toggle (string)
    + Video (string)
    + VideoRecording (string)
    
+ sticky (boolean, optional) - whether the component should stick at the top of the screen on scrolling. Defaults to `false`
+ Include ComponentData

## RESPONSEComponent (REQUESTComponent)

+ sticky (boolean, required) - whether the component should stick at the top of the screen on scrolling
+ Include ComponentData

## ComponentResultData
+ One of

    + url (string)
    + selectedOption (string)
    + accepted (boolean)
    + rating (number)
    + result (number)
    + text (string)
    + checked (boolean)
    
    
## REQUESTComponentResult (object)

+ type (enum) - depending on the type of the component
    + AdvancedImageMarkerResult (string)
    + BinaryChoiceResult (string)
    + RatingResult (string)
    + SimpleImageMarkerResult (string)
    + StepperResult (string)
    + TextInputResult (string)
    + ToggleResult (string)
    + VideoRecordingResult (string)
    
+ Include ComponentResultData

## RESPONSEComponentResult (REQUESTComponentResult)

## HATEAOSLink (object)

+ href (string)

## PaginationLinks (object)

+ next (HATEAOSLink) - url of the next page
+ previous (HATEAOSLink) - url of the previous page

## RESPONSETaskList (object)

+ _links (PaginationLinks)
+ tasks (array[RESPONSETask])

## RESPONSEJobList (object)

+ _links (PaginationLinks)
+ jobs (array[RESPONSEJob])

## RESPONSECampaignList (object)

+ _links (PaginationLinks)
+ campaigns (array[RESPONSECampaign])

## REQUESTApprove (object)

+ message (string, optional) - an optional message for the worker

## REQUESTReject (object)

+ reason (string, required) - a reason for the rejection that is displayed to the worker

## REQUESTSoftReject (object)

+ reason (string, required) - a reason for the rejection that is displayed to the worker
+ until (string, required) - timestamp until when the worker can redo the job

## JobProviderBalance (object)

+ available (string) - money available for new campaigns
+ frozen (string) - money currently frozen for active campaigns

## REQUESTProfile (object)

+ firstName (string)
+ lastName (string)
+ phone (string)
+ organization (string) - name of your organization
+ website (string) - your organization's website

## RESPONSEProfile (object)

+ Include REQUESTProfile
+ id (number)
+ customerId (string)
+ balance (JobProviderBalance)
+ email (string)
+ logo (string) - URL of your logo
+ commissionRate (number) - commission rate you pay for our platform usage on worker payments

## ResultsByWorker (object)

+ worker (number)
+ jobResults (array[RESPONSEJobResult])

## RESPONSEResultByWorker (object)

+ _links (PaginationLinks)
+ jobResultsByWorker (array[ResultsByWorker])

## SingleResultByTask (object)

+ jobResultId (number)
+ worker (number)
+ job (number)
+ task (number)
+ startedAt (string)
+ completedAt (string)
+ componentResults (array[RESPONSEComponentResult])

## ResultsByTask (object)

+ task (number)
+ jobResults (array[SingleResultByTask])

## RESPONSEResultsByTask (object)

+ _links (PaginationLinks)
+ jobResultsByTask (array[ResultsByTask])