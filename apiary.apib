AuthentFORMAT: 1A
HOST: https://api.swarms.com

# SWARMS API

Our API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer).
It has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors.
HTTP requests will be forwarded to HTTPS. We support cross-origin
resource sharing, allowing you to interact securely with our API from a client-side application.
All API responses, including errors, will return JSON by default.

Also, check out our [python sdk](https://github.com/swarms/python-sdk)!

### Content-Types

The API supports `application/json` as well as `application/hal+json` in the `accept` header.
If you call endpoints with the later, the response will include links to related resources and actions
that can be performed at that moment.

### Authentication

You authenticate by including an API token in the `X-Auth-Token` header of the requests. You
can request and discard the token with your credentials using the endpoints documented in
the [Auth Token section](/reference/auth-token).

As we are currently in a beta phase, you cannot signup on your own to our platform. If you want to
create your account, please send us an email to <a href="mailto:info@swarms.tech?Subject=Signup as JobProvider" target="_top">info@swarms.tech</a>.


### Errors

For errors the common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.
The body of the response will contain an error `code` and a `message` as well as a user friendly `description` like:

```
{
    "code": 1000,
    "message": "invalid credentials",
    "description": "The given credentials did not match any user in our database"
}
```

Each response will contain a `X-Request-ID` header with an UUID identifying that request. In case you encounter
weird behavior, please <a href="mailto:info@swarms.tech?Subject=Error for request: <Request ID>" target="_top">send us an email</a>
and include the request id in your message.


### Versioning

Our API is versioned in a `major.minor` format. You can specify the version to use by setting the
`X-API-Version` header in the requests. If this header is not present, it will default to the latest
version. The response will also include the used API version in the `X-API-Version` header.
The current API version is `1.0`.


### Time Formatting

Timestamps are returned in [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) timezone and formatted
according to the `ISO-8601` standard, as in `2017-08-02T13:58:24`.


### Feedback

Our API docs are [hosted on GitHub](https://github.com/swarms/api-doc). We appreciate your
feedback in issues in the repository or via email at <a href="mailto:info@swarms.tech?Subject=API Feedback" target="_top">info@swarms.tech</a>.


## Group Auth Token

In order to access and manage your resources via the API, you need to send an API token in the `X-Auth-Token`
header of your requests. You can can requests an auth token with your credentials.

### Request an auth token [POST /auth/token/request]

+ Request (application/json)

    + Headers

            X-API-Version: 1.0

    + Body

            {
                "email": "me@example.com",
                "password": "password"
            }

+ Response 200 (application/json)

        {
            "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxLUlVdVpWSTRKcDFSOVlTTGFOUHBGOVFcL1kwcU95TG10RGt0TE5WaG5GV0hSNDBMTklkZzN4TVAyZ0NrT0N3YzhYQ1Q4cmZsZlprcVhOeE1VQzlaZ3RVRFZnU1dBOXBOVW04MWlhIiwiaXNzIjoia3dpcXByb3ZpZGVyIiwiZXhwIjoxNTA4OTI0NDAwLCJpYXQiOjE1MDYzMzI0MDAsImp0aSI6ImEwMWNmYTBkZjJlYjI2NWYzOTQ1NTkxYmMyOGY3MWEzNTg5ZDE3NjZlYmI4MmRhYTBjYTFhOGIwNzJkNzI1ODk0OWJmOTZkMTUyOTJjNTFmYWNmNGFkZDNkMDZjMDQ2YjExYmRjNmI2Yjc2YTYwNmZkN2JmMTI2MzQ4NWZhZGNhYzU0NjExMTU2NGNhNGNiMjhiZTg5MGNlNDY5MjMyY2QyNmI5ZmIzMTdhZTVhZmQ1NjE0NWQzOGExODg1MzdkZTUxMDMxYWQwYmY4YTY3YjNlNzVjMzkwNTVkZDUxNTQzZDY0ODNkNzc4OGEwOTQwMWY4YWQ0MjEyNTNhYmI3ZDEifQ.AzOxuj3DBELmFyphOJQxAlodA3PzDeBN6x4G5qO1H5s",
            "expiresAt": "2017-10-25T09:40:00",
            "userId": 42
        }

### Discard an auth token [POST /auth/token/discard]

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

## Group Profile

## The Profile object [/me]

+ Attributes (RESPONSEProfile)

### Get your Profile [GET /me]

+ Request

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEProfile)


### Update your Profile [PUT /me]

+ Request (application/json)

    + Attributes (REQUESTProfile)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEProfile)

## Group Task

A `Task` is the unit of work that is displayed in a cohesive view on a mobile device. It consists of several
`Components` which can be _interactive_ (like a `TextInput`) or _non-interactive_ (like an `Image`).
Interactive components will produce results while the non-interactive ones won't. For an overview of all
available components check out the [Components Overview](reference/components-overview).

## The task object [/tasks]

+ Attributes (RESPONSETask)

### List all Tasks [GET /tasks{?order}{?limit}{?search}]

+ Parameters

    + order (array[string], optional)

        + Members

            + id

            + name

            + lastModifiedAt

            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.

    + search (string, optional) - search for full word matches

+ Request

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSETaskList)

### Get a single Task [GET /tasks/{id}]

+ Parameter

    + id (number) - id of the task

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSETask)

### Create a Task [POST]

+ Request (application/json)

    + Attributes (REQUESTTask)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSETask)


### Update a Task [PUT /tasks/{id}]

+ Parameter

    + id (number) - id of the task

+ Request (application/json)

    + Attributes (REQUESTTask)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSETask)


### Delete a Task [DELETE /tasks/{id}]

+ Parameter

    + id (number) - id of the task

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Copy a Task [POST /tasks/{id}/copy]

+ Parameter

    + id (number) - id of the task that should be copied

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSETask)


### Archive a Task [POST /tasks/{id}/archive]

+ Parameter

    + id (number) - id of the task that should be archived

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSETask)    


### Unarchive a Task [POST /tasks/{id}/unarchive]

+ Parameter

    + id (number) - id of the task that should be unarchived

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSETask)        


## Group Job

A `Job` is the unit of work a worker gets paid for. It is a sequence of `Tasks`.

## The job object [/jobs]

+ Attributes (RESPONSEJob)

### List all Jobs [GET /jobs{?order}{?limit}{?search}]

+ Parameters

    + order (array[string], optional)

        + Members

            + id

            + name

            + lastModifiedAt

            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.

    + search (string, optional) - search for full word matches

+ Request

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEJobList)

### Get a single Job [GET /jobs/{id}]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEJob)

### Create a Job [POST]

+ Request (application/json)

    + Attributes (REQUESTJob)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSEJob)


### Update a Job [PUT /jobs/{id}]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Attributes (REQUESTJob)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEJob)


### Delete a Job [DELETE /jobs/{id}]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Copy a Job [POST /jobs/{id}/copy{?deep}]

+ Parameters

    + id (number) - id of the job that should be copied

    + deep: false (boolean) - if `true`, included tasks will also be copied and linked to the job. If `false`, existing tasks for the orginial job will be linked to the new one.

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSEJob)


### Archive a Job [POST /jobs/{id}/archive{?deep}]

+ Parameters

    + id (number) - id of the job that should be archived

    + deep: false (boolean) - if `true`, included tasks will also be archived and linked to the job.

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSEJob)   


### Unarchive a Job [POST /jobs/{id}/unarchive]

+ Parameters

    + id (number) - id of the job that should be archived. Will also unarchive included tasks.

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSEJob)       

# Tasks of a Job [/jobs/{id}/tasks]

You can add, update and get the tasks of a job.

### List Tasks of a Job [GET /jobs/{id}/tasks]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSETaskList)


### Update Tasks of a Job [PUT /jobs/{id}/tasks]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Attributes (array[number])

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

## Group Campaign

A `Campaign` is a collection of `Jobs`. It defines under which conditions its jobs are published
to our job market. If you want to make a `Job` available to the workers, you first need to add it to
a campaign first and publish this campaign to our Job Market.

## The campaign object [/campaigns]

+ Attributes (RESPONSECampaign)

### List all Campaigns [GET /campaigns{?order}{?limit}{?search}{?before}{?after}]

+ Parameters

    + order (array[string], optional)

        + Members

            + id

            + name

            + lastModifiedAt

            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.

    + search (string, optional) - search for full word matches

+ Request

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSECampaignList)


### Get a single Campaign [GET /campaigns/{id}]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSECampaign)

### Create a Campaign [POST]

+ Request (application/json)

    + Attributes (REQUESTCampaign)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSECampaign)

### Update a Campaign [PUT /campaigns/{id}]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Attributes (REQUESTCampaign)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSECampaign)

### Delete a Campaign [DELETE /campaigns/{id}]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Copy a Campaign [POST /campaigns/{id}/copy{?deep}]

+ Parameters

    + id (number) - id of the campaign that should be copied

    + deep: false (boolean) - if `true`, included jobs _and_ tasks will also be copied and linked to the campaign. If `false`, existing jobs and tasks for the orginial campaign will be linked to the new one.

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSECampaign)


### Archive a Campaign [POST /campaigns/{id}/archive{?deep}]

+ Parameters

    + id (number) - id of the campaign that should be archived

    + deep: false (boolean) - if `true`, included jobs _and_ tasks will also be archived and linked to the campaign.

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSECampaign)   


### Unarchive a Campaign [POST /campaigns/{id}/unarchive]

+ Parameters

    + id (number) - id of the campaign that should be archived. Will also unarchive included jobs and tasks.

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSECampaign)   


# Jobs of a Campaign [/campaigns/{id}/jobs]

You can add, update and get the jobs of a campaign.

### List Jobs of a Campaign [GET /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEJobList)

### Add Jobs to a Campaign [POST /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Attributes (array[number])

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Update Jobs of a Campaign [PUT /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Attributes (array[number])

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

# Campaign Lifecycle [/campaigns/{id}]

The `Campaign`s state manages the availability of it's jobs on our Job Market.

Initially, a `Campaign` is unpublished. After you added Jobs to it, you can `publish` it to our
Job Market which will set its state to `active`. When the `Campaign` is active, it's Jobs are
available on our Job Market and workers can work on them.
You can `pause` an active Campaign and `continue` it afterwards. When all results for
a Campaign  have been generated, the Campaign's state is set to `finished`.

It is also possible to `cancel` a campaign after it has been published.

This lifecycle is also shown in the below drawing.

![test](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/CampaignStates+(1).svg)

### Publish a Campaign [POST /campaigns/{id}/publish]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Pause an active Campaign [POST /campaigns/{id}/pause]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Continue a paused Campaign [POST /campaigns/{id}/continue]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Cancel a published Campaign [POST /campaigns/{id}/cancel]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)


## Group Result

You can get the `Results` for Campaigns that have been published to our Job Market.
In the moment the Worker uploads the Results to our servers, your time to review the Results begins.
This time can be set by the `maxReviewTime` attribute of the `Campaign`.

You can `approve`, `reject` or `soft-reject` a Result during the review time.
If you `reject` a Result, the worker won't get paid and his reputation gets damaged.
With a `soft-reject`, you can ask a Worker to redo the Job. In contrast to a normal `reject` this
will have no effect on the Worker's reputation.

When the review time expires without any action, it will get `auto-approved`.

The Worker will only get paid at the moment his Results get `approved`.

## The result object [/results]

+ Attributes (JobResult)

### List all Results for a Campaign [GET /campaigns/{id}/results{?limit}]

+ Parameter

    + id (number) - id of the result
    + limit (number, optional) - the number of elements being fetched. Default is 10.
    + since (string, optional) - only fetch results that were submitted after a specific date. Format as in `2018-03-14T03:14`.

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEJobResult)

### List all Workers that participated in a Campaign [GET /campaigns/{id}/workers{?limit}{?InReview}]

+ Parameter

    + id (number) - id of the result
    + limit (number, optional) - the number of elements being fetched. Default is 10.
    + InReview (boolean, optional) - if true, only workers that currently have results in review will be fetched.

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEWorkerInResults)  
 

### List all Results for a Campaign for a specific Worker [GET /campaigns/{campaignId}/workers/{workerId}/results{?limit}{?state}{?since}]

+ Parameter

    + campaignId (number) - id of the campaign
    + workerId (number) - id of the worker
    + limit (number, optional) - the number of elements being fetched. Default is 10.
    + since (string, optional) - only fetch results that were submitted after a specific date. Format as in `2018-03-14T03:14`.
    + state (string, optional) - filter results by state. One of `InReview`, `Approved`, `Rejected`.
    

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEResultByWorker)  
 

### Approve a Result [POST /results/{id}/approve]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

    + Attributes (REQUESTApprove)

+ Response 200 (application/json)

### Reject a Result [POST /results/{id}/reject]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

    + Attributes (REQUESTReject)

+ Response 200 (application/json)

### Soft-reject a Result [POST /results/{id}/soft-reject]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
            X-Auth-Token: token

    + Attributes (REQUESTSoftReject)

+ Response 200 (application/json)


# Group Components Overview

Here you can see the all currently supported components that you can use to build your Tasks.
The components will be displayed below each other in the Task.

**Interactive Components**
* AudioRecording
* BinaryChoice
* BinaryImageChoice
* ImageMarker
* Rating
* TextInput
* Toggle
* VideoRecording

**Non-Interactive Components**
* Audio
* Image
* Text
* Video

# Interactive Components

Interactive Components require the Worker's input. These components will generate the Results that
can be fetched afterwards.




## AudioRecording

The `AudioRecording` let's the worker to record audio. The worker can record, play and rerecord the audio.

### Example

![AudioRecording](https://docs.swarms.com/components/AudioRecording.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `minDurationInSeconds`      | number  | minimum duration of the recording in seconds             |
| `maxDurationInSeconds`      | number  | maximum duration of the recording in seconds             |

### Result

| name       | type    | description     |
|:-----------|---------|-----------------|
| `url`  | string | url of the audio (with `.aac` extension) |




## BinaryChoice

A `BinaryChoice` will display two labelled buttons to the worker. The worker can only select
one of them.

### Example

![BinaryChoice](https://docs.swarms.com/components/BinaryChoice.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `option1`  | string  | 1st option label      |
| `option2`  | string  | 2nd option label   |

### Result

| name              | type    | description     |
|:------------------|---------|-----------------|
| `selectedOption`  | string  | selected option label |




## BinaryImageChoice

A `BinaryImageChoice` will display two labelled images to the worker. The worker can only select one of them.

### Example

![BinaryImageChoice](https://docs.swarms.com/components/BinaryImageChoice.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `option1`  | Option Object  | 1st Option Object      |
| `option2`  | Option Object  | 2nd Option Object   |


##### Option Object
| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `id`  | string  | option id      |
| `url`  | string  | option image url      |
| `label`  | string  | option label      |

### Result

| name              | type    | description     |
|:------------------|---------|-----------------|
| `selectedOption`  | string  | selected option id |




## ImageMarker

The `ImageMarker` let's the worker draw on an image using his finger. He can adjust the size, color and opacity of the drawing. Also erase the drawing, undo and redo his changes, zoom, and draw in landscape or portrait mode. The image is rendered without pixel smoothing, so that the worker can be very precise with his drawings.

### Example

![ImageMarker](https://docs.swarms.com/components/ImageMarker.gif)

This example uses the following input image and would generate the following result:

#### input

![a](https://docs.swarms.com/components/ImageMarkerSampleImage.jpg)

#### result
![ImageMarkerResult](https://docs.swarms.com/components/ImageMarkerResult.png)


### Attributes

| name       | type    | description |
|:-----------|-----------|-----------|
| `url`      | string  | url of the image |

### Result

| name   | type    | description                 |
|:-------|---------|-----------------------------|
| `url`  | string  | url of the drawing (with `.png` extension) |




## Rating

A `Rating` component displays a simple Rating bar to the user. The worker must select at least one star.
You can define the number of stars and if the worker can also select half stars.

### Example

![Rating](https://docs.swarms.com/components/Rating.gif)


### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `steps`      | number  | number of stars            |
| `halfSteps`      | boolean  | whether the worker can select half stars            |

### Result

| name      | type    | description     |
|:----------|---------|-----------------|
| `rating`  | number  | rating          |




## Stepper

A `Stepper` component requires the worker to select a number from a specified number range by tapping up and down arrows.
You can define the minimum and maximum values of the range, a start value, and an value change step.

### Example

![Stepper](https://docs.swarms.com/components/Stepper.gif)


### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `min`      | number  | minimum value of the range   |
| `max`      | number  | maximum value of the range   |
| `step`      | number  | value change step           |
| `start`      | number  | number of stars            |

### Result

| name      | type    | description     |
|:----------|---------|-----------------|
| `result`  | number  | selected number |




## TextInput

A `TextInput` will ask a worker for a short text input via keyboard. You can set a `hint` that is displayed
in the input field before the worker starts typing.

### Example

![TextInput](https://docs.swarms.com/components/TextInput.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `hint`      | string  | text of the input field before typing             |

### Result

| name    | type    | description     |
|:--------|---------|-----------------|
| `text`  | string  | the worker's input |




## Toggle

A `Toggle` can be used to ask for a simple `true`/`false` on a label. It can be set to be toggled by default.


### Example

![Toggle](https://docs.swarms.com/components/Toggle.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `label`      | string  | label of the Toggle             |
| `checkedByDefault`      | boolean  | the initial state of the Toggle             |
| `explanation`      | string  | an explanation for the worker. Shown as a Popup.             |

### Result

| name       | type    | description     |
|:-----------|---------|-----------------|
| `checked`  | boolean | whether worker checked the Toggle |




## VideoRecording

### Example

![VideoRecording](https://docs.swarms.com/components/VideoRecording.gif)

### Attributes

| name                   | type    | description                          |
|:-----------------------|---------|--------------------------------------|
| `orientation`            | string | video orientation: **"any"**, **"portrait"**, **"landscape"**      |
| `minDurationInSeconds` | number  | minimum video duration               |
| `maxDurationInSeconds` | number  | maximum video duration               |

### Result

| name   | type    | description               |
|:-------|---------|---------------------------|
| `url`  | string  | url of the recorded video |




# Non-interactive Components

## Audio

An audio file which is playable in a simple audio player in the Task. You can set whether it should start or repeat automatically
and whether the worker has to listen it fully at least once. The worker can pause and replay the audio.

### Example

![Audio](https://docs.swarms.com/components/Audio.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the audio             |
| `autoplay` | boolean | whether the audio should start playing automatically |
| `repeat`   | boolean | whether the audio should repeat automatically        |
| `mustListen`    | boolean | whether the worker must listen the audio at least once                    |




## Image

A simple image that is displayed in the Task.

### Example

![Image](https://docs.swarms.com/components/Image.png)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |




## Text

A text that is displayed in the Task in a style of your choice

### Example

![Text](https://docs.swarms.com/components/Text.png)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `text`     | string  | the text to display          |
| `style`    | string  | the style of the text        |

The attribute `style` can be one of:
`"Question", "Instruction", "H1", "H2", "PlainText", "Html", "Quote"`




## Video

A video which is playable in a simple video player in the Task. You can set it to play or repeat automatically, mute the sound, and define whether the worker has to watch it fully at least once. The worker can pause and replay the video.

### Example
![Video](https://docs.swarms.com/components/Video.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the video             |
| `autoplay` | boolean | whether the video should start playing automatically |
| `repeat`   | boolean | whether the video should repeat automatically        |
| `mustWatch`    | boolean | whether the worker must watch the video at least once                    |
| `playAudio`    | boolean | whether the audio should be played                    |



# Data Structures

## Properties (object)
+ key: key (string) - a custom key
+ value: value (string) - a custom value

## DefaultAttributes

+ id: 1 (number) - id of the resource
+ readOnly: false (boolean) - indicates whether the resource can be modified
+ lastModifiedAt: `2017-08-02T13:58:24` (string) - the datetime of the last modification of the resource.
+ createdAt: `2017-08-02T13:58:24` (string) - the datetime of the creation of the resource.
+ archived: false (boolean) - if the resource is archived.
+ properties(Properties, optional) - a json object containing a set of custom key/value pairs (optional).

## REQUESTTask (object)

+ name: My first Task (string) - name of the task
+ components (array[REQUESTComponent]) - components of the task
+ properties(Properties, optional) - a json object containing a set of custom key/value pairs (optional).

## RESPONSETask (object)

+ include REQUESTTask
+ resourcesSize: 3MB (string) - size of the task including media files
+ estimatedUploadSize: 2MB (string) - estimated upload size of the results for this task for the worker
+ Include DefaultAttributes

## REQUESTJob (object)

+ name: My first Job (string) - name of the job
+ description: this job differs from the others! (string, optional) - job specific description that will be appended to the campaign description.
+ properties(Properties, optional) - a json object containing a set of custom key/value pairs (optional).

## RESPONSEJob (object)

+ Include REQUESTJob
+ resourcesSize: 3MB (string) - size of the job including media files
+ estimatedUploadSize: 2MB (string) - estimated upload size of the results for this job for the worker
+ Include DefaultAttributes

## REQUESTCampaign (object)

+ name: My first Campaign (string) - name of the campaign
+ title: Review model images (string) - title for jobs in this campaign on the job market
+ description: You will see 20 models images which you should rate on a 1 to 5 scale. (string, optional) - description for jobs in this campaign on the job market
+ terms: Don't tell anyone about this. (string, optional) - title for jobs in this campaign on the job market
+ estDuration: 10 sec (string) - estimated duration for jobs in this campaign
+ workerPayment: 0.01 (number) - payment (in USD) for workers who work on jobs in this campaign.
+ results: 3 (number) - number of results that should be generated for each job of the campaign
+ maxResultsPerWorker: 1 (number, optional) - number of times a single worker can work on each job of the campaign (optional)
+ workerGroup: 1 (number, optional) - id of a workergroup to specify the workers that can work on jobs in this campaign (optional)
+ maxWorkTime: 10 min (string, optional) - time a worker has to work on a job of this campaign (optional)
+ maxUploadTime: 4 hours (string, optional) -  time a worker has to upload the results after finishing his work (optional)
+ maxReviewTime: 3 hours - (string, optional) - timeframe in which results can be (soft-) rejected before they get auto approved (optional)
+ training: false (boolean, optional) - if this campaign is a training for future jobs (optional)
+ startDate: 2018-01-01T10:00 (string, optional) - publish this campaign automatically at a specific date (optional)
+ endDate: 2018-01-01T10:00 (string, optional) - finish this campaign automatically at a specific date (optional)
+ properties(Properties, optional) - a json object containing a set of custom key/value pairs (optional)

## RESPONSECampaign (object)

+ Include REQUESTCampaign
+ state (enum)
    + unpublished - The campaign has not been published yet
    + active - Jobs of this campaign are currently on our Job market
    + paused - The campaigns is currently paused, Workers cannot work on jobs
    + cancelled - The campaign has been cancelled
    + finished - The campaign is finished, all requested results have been generated
+ Include DefaultAttributes

## RESPONSETaskResult (object)
+ task (SingleTask)
+ startedAt: `2017-08-02T13:58:24` (string) - datetime the worker started the task
+ completedAt: `2017-08-02T13:58:24` (string) - datetime the worker completed the task
+ components (array[SingleComponent])

## RESPONSEJobResult (object)

+ _links (PaginationLinks)
+ results (array[JobResult])

## JobResult (object)

+ worker: 42 (number) - id of the worker
+ job: 24 (number) - id of the job
+ startedAt: `2017-08-02T13:58:24` (string)  - datetime the worker started the job
+ completedAt: `2017-08-02T13:58:24` (string)  - datetime the worker complted the job
+ state (enum)
    + InReview
    + Approved
    + Rejected
+ taskResults (array[RESPONSETaskResult])
+ id: 12 (number) - id of the result

## ComponentData

+ One of

    + Properties
        + landscape (boolean)
        + minDurationInSeconds (number)
        + maxDurationInSeconds (number)
    + url (string)
    + hint (string)
    + text (string)
    + Properties
        + option1 (string)
        + option2 (string)
    + Properties
        + steps (number)
        + halfSteps (boolean)
    + Properties
        + min (number)
        + max (number)
        + steps (number)
        + start (number)
    + Properties
        + label (string)
        + checkedByDefault (boolean)
    + Properties
        + url (string)
        + autoplay (boolean)
        + repeat (boolean)


## REQUESTComponent (object)

+ type (enum) - depending on the type, different values must be set
    + BinaryChoice (string)
    + Image (string)
    + ImageMarker (string)
    + Instruction (string)
    + Question (string)
    + Rating (string)
    + Stepper (string)
    + TextInput (string)
    + Toggle (string)
    + Video (string)
    + VideoRecording (string)

+ sticky: false (boolean, optional) - whether the component should stick at the top of the screen on scrolling. Defaults to `false`
+ optionalResult: false (boolean, optional) - whether the worker needs to interact with this component. Defaults to `false`
+ Include ComponentData
+ properties(Properties, optional) - a json object containing a set of custom key/value pairs (optional).

## RESPONSEComponent (REQUESTComponent)

+ sticky: false (boolean, required) - whether the component should stick at the top of the screen on scrolling
+ Include ComponentData

## ComponentResultData
+ One of

    + url (string)
    + selectedOption (string)
    + accepted (boolean)
    + rating (number)
    + result (number)
    + text (string)
    + checked (boolean)


## REQUESTComponentResult (object)

+ type (enum) - depending on the type of the component
    + AdvancedImageMarkerResult (string)
    + BinaryChoiceResult (string)
    + RatingResult (string)
    + SimpleImageMarkerResult (string)
    + StepperResult (string)
    + TextInputResult (string)
    + ToggleResult (string)
    + VideoRecordingResult (string)
    + EmptyResult (string)
    

+ Include ComponentResultData

## RESPONSEComponentResult (REQUESTComponentResult)

## HATEAOSNextLink (object)

+ href: /resources?after=42&... (string) - url of the next page

## HATEAOSPreviousLink (object)

+ href: /resources?before=42&... (string) - url of the previous page

## PaginationLinks (object)

+ next (HATEAOSNextLink)
+ previous (HATEAOSPreviousLink)

## RESPONSETaskList (object)

+ _links (PaginationLinks)
+ tasks (array[RESPONSETask])

## RESPONSEJobList (object)

+ _links (PaginationLinks)
+ jobs (array[RESPONSEJob])

## RESPONSECampaignList (object)

+ _links (PaginationLinks)
+ campaigns (array[RESPONSECampaign])

## REQUESTApprove (object)

+ message: Well done! (string, optional) - an optional message for the worker

## REQUESTReject (object)

+ reason: Cheating detected! (string, required) - a reason for the rejection that is displayed to the worker

## REQUESTSoftReject (object)

+ reason: Be more precise, please (string, required) - a reason for the rejection that is displayed to the worker provided in Markdown
+ until: `2017-08-02T13:58:24` (string, required) - timestamp until when the worker can redo the job

## JobProviderBalance (object)

+ available: 42 USD (string) - money available for new campaigns
+ frozen: 24 USD (string) - money currently frozen for active campaigns

## REQUESTProfile (object)

+ firstName: Jon (string) - your first name
+ lastName: Doe (string) - your last name
+ phone: +123456789 (string) - your phone
+ organization: Swarms Technologies (string) - name of your organization
+ website: www.swarms.com (string) - your organization's website

## RESPONSEProfile (object)

+ Include REQUESTProfile
+ id: 42 (number) - your id
+ customerId: AB12CD34 (string) - your customer id
+ balance: (JobProviderBalance) - your current balance
+ email: email@swarms.com (string) - your email
+ logo: https://logo.swarms.com (string) - URL of your logo
+ commissionRate: 0.2 (number) - commission rate on worker payments
+ charity: false (boolean) - if your account is a charity one

## RESPONSEWorkersReputation (object)

+ me: 100.00 (number) - workers reputation on jobs from you
+ global: 99.99 (number) - workers global reputation on the platform

## RESPONSEWorkersExperience (object)

+ me: 24 (number) - workers experience on jobs from you
+ global: 42 (number) - workers global experience on the platform

## RESPONSEWorkersResults (object)

+ inReview: 24 (number) - number of results in review in the campaign
+ approved: 42 (number) - number of approved results in the campaign
+ rejected: 24 (number) - number of rejected results in the campaign

## WorkerInResults (object)

+ id: (number) - workers id
+ reputation: (RESPONSEWorkersReputation) - workers reputation
+ experience: (RESPONSEWorkersExperience) - workers experience
+ results: (RESPONSEWorkersResults) - workers results counts for the campaign

## RESPONSEWorkerInResults (object)

+ _links (PaginationLinks)
+ workers: (array[WorkerInResults])

## RESPONSEResultByWorker (object)

+ _links (PaginationLinks)
+ results (array[JobResult])
+ worker (WorkerInResults)

## SingleTask (object)

+ id: 42 (number) - id of the task
+ name: My first Task (string) name of the task

## SingleComponent (object)

+ data (RESPONSEComponent)
+ result (ComponentResultData)

## SingleComponentByTask (object)

+ data (RESPONSEComponent)
+ results (array[SingleComponentResultByTask])

## SingleComponentResultByTask (object)

+ jobResult: 42 (number) - id of the job result
+ worker: 24 (number) - id of the worker
+ job: 12 (number) - id of the job
+ startedAt: `2017-08-02T13:58:24` (string) - datetime the worker started the job
+ completedAt `2017-08-02T13:58:24` (string) - datetime the worker completed the job
+ result (array[ComponentResultData])

## ResultsByTask (object)

+ task (SingleTask)
+ components (array[SingleComponentByTask])

## RESPONSEResultsByTask (object)

+ _links (PaginationLinks)
+ jobResultsByTask (array[ResultsByTask])