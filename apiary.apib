FORMAT: 1A
HOST: https://api.swarms.tech

# SWARMS API

Our REST API allows you to manage your resources on our platform.

### Authentication

You authenticate by including your auth token in the `X-Auth` Header of the requests. You can request and discard your token with your credentials using the
endpoints documented in the [Auth Token section](/reference/0/auth-token).


### Errors

The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md)
are used. In case of an error, the body of the reponse will also contain an error `code` and a `message` as well as a user friendly `description` like:

```
{
    "code": 1000,
    "message": "invalid credentials",
    "description": "The given credentials did not match any user in our database"
}
```

### Versioning

The API is versioned in a `major.minor` format. You can specify the version to use by setting the 
`X-API-Version` header in your requests. If this header is not present, it will default to the latest
version. The response will also include the used API version in the `X-API-Version` header. The current version is `1.0`.

### Use of HTTP Verbs

POST for everything with an action.

### Feedback

Our API docs are [hosted on GitHub](https://github.com/swarms/api-doc). We appreciate feedback there in issues or via email to `info@swarms.tech`. 

## Auth Token [/auth]
### Request an auth token [POST /auth/token/request]

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
        
    + Body

            {
                "email": "me@example.com",
                "password": "password"
            }

+ Response 200 (application/json)

        {
            "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxLUlVdVpWSTRKcDFSOVlTTGFOUHBGOVFcL1kwcU95TG10RGt0TE5WaG5GV0hSNDBMTklkZzN4TVAyZ0NrT0N3YzhYQ1Q4cmZsZlprcVhOeE1VQzlaZ3RVRFZnU1dBOXBOVW04MWlhIiwiaXNzIjoia3dpcXByb3ZpZGVyIiwiZXhwIjoxNTA4OTI0NDAwLCJpYXQiOjE1MDYzMzI0MDAsImp0aSI6ImEwMWNmYTBkZjJlYjI2NWYzOTQ1NTkxYmMyOGY3MWEzNTg5ZDE3NjZlYmI4MmRhYTBjYTFhOGIwNzJkNzI1ODk0OWJmOTZkMTUyOTJjNTFmYWNmNGFkZDNkMDZjMDQ2YjExYmRjNmI2Yjc2YTYwNmZkN2JmMTI2MzQ4NWZhZGNhYzU0NjExMTU2NGNhNGNiMjhiZTg5MGNlNDY5MjMyY2QyNmI5ZmIzMTdhZTVhZmQ1NjE0NWQzOGExODg1MzdkZTUxMDMxYWQwYmY4YTY3YjNlNzVjMzkwNTVkZDUxNTQzZDY0ODNkNzc4OGEwOTQwMWY4YWQ0MjEyNTNhYmI3ZDEifQ.AzOxuj3DBELmFyphOJQxAlodA3PzDeBN6x4G5qO1H5s",
            "expiresAt": "2017-10-25T09:40:00",
            "userId": 42
        }

### Discard an auth token [POST /auth/token/discard]

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)


## Tasks [/tasks]

A `Task` is the unit of work that is displayed in a cohesive view on a mobile device. It consists of several
`Components` which can be _interactive_ (like a `TextInput`) or _non-interactive_ (like an `Image`).
Interactive components will produce results while the non-interactive ones won't. For an overview of all
available components check out the [Components Overview](reference/components-overview).

+ Attributes (RESPONSETask)

### List all Tasks [GET /tasks{?order}{?limit}{?search}{?before}{?after}]

+ Parameters

    + order (array[string], optional)
        
        + Members
            
            + id
            
            + name
            
            + lastModifiedAt
            
            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.
    
    + search (string, optional) - search for full word matches
    
    + before (number, optional) - fetch only elements before the one with this `id`
    
    + after (number, optional) - fetch only elements after the one with this `id`

+ Request

    + Headers
        
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (array[RESPONSETask])

### Create a Task [POST]

+ Request (application/json)

    + Attributes (REQUESTTask)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSETask)
   
   
### Update a Task [PUT /tasks/{id}]

+ Parameter

    + id (number) - id of the task

+ Request (application/json)

    + Attributes (REQUESTTask)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSETask)
    
    
### Delete a Task [DELETE /tasks/{id}]

+ Parameter

    + id (number) - id of the task

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)
    
    
## Jobs [/jobs]

A `Job` is the unit of work a worker gets paid for. It is a sequence of `Tasks`.

+ Attributes (RESPONSEJob)

### List all Jobs [GET /jobs{?order}{?limit}{?search}{?before}{?after}]

+ Parameters

    + order (array[string], optional)
        
        + Members
            
            + id
            
            + name
            
            + lastModifiedAt
            
            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.
    
    + search (string, optional) - search for full word matches
    
    + before (number, optional) - fetch only elements before the one with this `id`
    
    + after (number, optional) - fetch only elements after the one with this `id`

+ Request

    + Headers
        
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (array[RESPONSEJob])

### Create a Job [POST]

+ Request (application/json)

    + Attributes (REQUESTJob)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSEJob)
   
   
### Update a Job [PUT /jobs/{id}]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Attributes (REQUESTJob)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEJob)
    
    
### Delete a Job [DELETE /jobs/{id}]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

# Tasks of a Job [/jobs/{id}/tasks]

kajsdnfkjasdnfsdanf
adsflkmsadf
adsflkndasf
adsfklm

### List Tasks of a Job [GET /jobs/{id}/tasks]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

        + Attributes (array[number])

### Add Tasks to a Job [POST /jobs/{id}/tasks]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Attributes (array[number])

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Update Tasks of a Job [PUT /jobs/{id}/tasks]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Attributes (array[number])

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

## Campaigns [/campaigns]

A `Campaign` is a collection of `Jobs`. It defines under which conditions its jobs are published
to our job market.

+ Attributes (RESPONSECampaign)

### List all Campaigns [GET /campaigns{?order}{?limit}{?search}{?before}{?after}]

+ Parameters

    + order (array[string], optional)
        
        + Members
            
            + id
            
            + name
            
            + lastModifiedAt
            
            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.
    
    + search (string, optional) - search for full word matches
    
    + before (number, optional) - fetch only elements before the one with this `id`
    
    + after (number, optional) - fetch only elements after the one with this `id`

+ Request

    + Headers
        
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (array[RESPONSECampaign])

### Create a Campaign [POST]

+ Request (application/json)

    + Attributes (REQUESTCampaign)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSECampaign)
    
    
### Delete a Campaign [DELETE /camapigns/{id}]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

# Jobs of a Campaign [/campaigns/{id}/jobs]

kajsdnfkjasdnfsdanf
adsflkmsadf
adsflkndasf
adsfklm

### List Jobs of a Campaign [GET /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

        + Attributes (array[number])

### Add Jobs to a Campaign [POST /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Attributes (array[number])

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Update Jobs of a Campaign [PUT /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Attributes (array[number])

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

# Campaign Lifecycle [/campaigns/{id}]

kajsdnfkjasdnfsdanf
adsflkmsadf
adsflkndasf
adsfklm

![test](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/CampaignStates+(1).svg)

### Publish a Campaign [POST /camapigns/{id}/publish]

+ Parameter
u
    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Pause an active Campaign [POST /camapigns/{id}/pause]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Continue a paused Campaign [POST /camapigns/{id}/continue]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Cancel a published Campaign [POST /camapigns/{id}/cancel]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)


## Results [/results]

* results for campaigns
* auto approve after some time
* reject
* approve
* soft reject

+ Attributes (RESPONSEComponentResult)

### List all Results for a Campaign [GET /campaigns/{id}/results]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (array[RESPONSEComponentResult])

### Approve a Result [POST /results/{id}/approve]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Reject a Result [POST /results/{id}/reject]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Soft-reject a Result [POST /results/{id}/soft-reject]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    
# Group Components Overview

Here you can see the all currently supported components that you can use to build your Tasks.
The components will be shown below each other in the Task.

## Interactive Components

### BinaryCoice

A `BinaryChoice` will display two labelled buttons to the worker. The worker can only select 
one of them.

###### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `option1`  | string  | label for one  button        |
| `option2`  | string  | label for the other button   |

### ImageMarker



###### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |


### Rating

###### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |

### Stepper

###### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |

### TextInput

###### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |

### Toggle

###### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |

### VideoRecording

###### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |

## Non-interactive Components

### Image

A simple image that is displayed in the Task.

###### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |

### Instruction

An instruction for the worker.

###### Attributes

| name        | type    | description                  |
|:------------|---------|------------------------------|
| `text`      | string  | the instruction              |

### Question

A question for the worker.

###### Attributes

| name        | type    | description                  |
|:------------|---------|------------------------------|
| `text`      | string  | the question                 |


### Video

###### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |

            
# Data Structures

## DefaultAttributes

+ id: 1 (number) - id of the task
+ readOnly: false (boolean) - indicates whether task can be modified
+ lastModifiedAt: `2017-08-02T13:58:24` (string) - the datetime of the last modification of the task. In ??? format and UTC
+ createdAt: `2017-08-02T13:58:24` (string) - the datetime of the creation of the task. In ??? format and UTC

## REQUESTTask (object)

+ name: My first Task (string) - name of the task
+ components (REQUESTComponent) - components of the task

## RESPONSETask (REQUESTTask)

+ Include DefaultAttributes

## REQUESTJob (object)

+ name: My first Job (string) - name of the job

## RESPONSEJob (REQUESTJob)

+ Include DefaultAttributes

## REQUESTCampaign (object)

+ name: My first Campaign (string) - name of the campaign
+ title: bla (string) - title for jobs in this campaign on the job market
+ description: bla (string, optional) - description for jobs in this campaign on the job market
+ terms: bla (string, optional) - title for jobs in this campaign on the job market
+ estDuration: 10 sec (string) - estimated duration for jobs in this campaign
+ workerPayment: 0.01 (number) - payment (in USD) for workers who work on jobs in this campaign
+ maxResults: 3 (number) - number of results that should be generated for each job of the campaign
+ maxResultsPerWorker: 1 (number) - number of times a single worker can work on each job of the campaign
+ workerGroup: 1 (number, optional) - id of a workergroup to specify the workers that can work on jobs in this campaign
+ maxWorkTime: 10 min (string, optional) - time a worker has to finish a job of this campaign after starting working on it
+ maxUploadTime: 4 hours (string, optional) -  time a worker has to uplaod the results after finishing his work
+ maxReviewTime: 3 hours - (string, optional) - timeframe after the results have ben uploaded in which results can be (soft-) rejected before they get auto approved


## RESPONSECampaign (REQUESTCampaign)

+ Include DefaultAttributes

## ComponentData
+ One of

    + Properties
        + landscape (boolean)
        + minDurationInSeconds (number)
        + maxDurationInSeconds (number)
    + url (string)
    + hint (string)
    + text (string)
    + Properties
        + option1 (string)
        + option2 (string)
    + Properties
        + steps (number)
        + halfSetps (boolean)
    + Properties
        + min (number)
        + max (number)
        + steps (number)
        + start (number)
    + Properties
        + label (string)
        + checkedByDefault (boolean)
    + Properties
        + url (string)
        + autoplay (boolean)
        + repeat (boolean)


## REQUESTComponent (object)

+ type (enum) - depending on the type, different values must be set
    + BinaryChoice (string)
    + Image (string)
    + ImageMarker (string)
    + Instruction (string)
    + Question (string)
    + Rating (string)
    + Stepper (string)
    + TextInput (string)
    + Toggle (string)
    + Video (string)
    + VideoRecording (string)
    
+ sticky (boolean, optional) - whether the component should stick at the top of the screen on scrolling. Defaults to `false`
+ Include ComponentData

## RESPONSEComponent (REQUESTComponent)

+ sticky (boolean, required) - whether the component should stick at the top of the screen on scrolling
+ Include ComponentData

## ComponentResultData
+ One of

    + url (string)
    + selectedOption (string)
    + accepted (boolean)
    + rating (number)
    + result (number)
    + text (string)
    + checked (boolean)
    
    
## REQUESTComponentResult (object)

+ type (enum) - depending on the type of the component
    + AdvancedImageMarkerResult (string)
    + BinaryChoiceResult (string)
    + RatingResult (string)
    + SimpleImageMarkerResult (string)
    + StepperResult (string)
    + TextInputResult (string)
    + ToggleResult (string)
    + VideoRecordingResult (string)
    
+ Include ComponentResultData

## RESPONSEComponentResult (REQUESTComponentResult)