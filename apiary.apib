FORMAT: 1A
HOST: https://api.swarms.tech

# SWARMS API

The SWARMS API is built around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer).
API requests and responses are formatted in JSON. We use common HTTP methods for the requests on our API.
Requests to perform actions, e.g. like activating a campaign, will use `POST`. HTTP requests will be redirected to HTTPS. You will need
to authenticate in order to use the API.

### Authentication
You will need to have credentials in order to authenticate and recieve an auth token which you need to send in your requests.
At the moment, you need to contact us at `info@swarms.tech` in order to receive credentials for our platform which
you can use to authenticate. A signup endpoint will come soon.

You authenticate by including your auth token in the `X-Auth` Header of the requests. You can request and discard your token with your credentials using the
endpoints documented in the [Auth Token section](/reference/0/auth-token).


### Errors

The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md)
are used. In case of a 4XX respone, the body of the reponse will contain an error `code` and a `message` as well as a user friendly `description` like:

```
{
    "code": 1000,
    "message": "invalid credentials",
    "description": "The given credentials did not match any user in our database"
}
```

Each response will contain a `X-Request-ID` header with an UUID identifying that request. In case you encounter
weird behaviour, please shoot us an email and include the request id in your message.

### Time Formatting

All timestamps are interpreted as being in the [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) timezone and formatted
accoring to `ISO-8601`, like in `2017-08-02T13:58:24`.

### Versioning

The API is versioned in a `major.minor` format. You can specify the version to use by setting the 
`X-API-Version` header in your requests. If this header is not present, it will default to the latest
version. The response will also include the used API version in the `X-API-Version` header. The current version is `1.0`.


### Feedback

Our API docs are [hosted on GitHub](https://github.com/swarms/api-doc). We appreciate feedback there in issues or via email to `info@swarms.tech`. 


## Group Auth Token

In order to access and manage your resources via the API, you need to send an API token in the `X-Auth-Token`
header of your requests. You can can requests your auth token with your credenials. At the moment, you cannot
sign up yourself on our platform. You can request your credentials via email at `info@swarms.tech`.

### Request an auth token [POST /auth/token/request]

+ Request (application/json)

    + Headers

            X-API-Version: 1.0
        
    + Body

            {
                "email": "me@example.com",
                "password": "password"
            }

+ Response 200 (application/json)

        {
            "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxLUlVdVpWSTRKcDFSOVlTTGFOUHBGOVFcL1kwcU95TG10RGt0TE5WaG5GV0hSNDBMTklkZzN4TVAyZ0NrT0N3YzhYQ1Q4cmZsZlprcVhOeE1VQzlaZ3RVRFZnU1dBOXBOVW04MWlhIiwiaXNzIjoia3dpcXByb3ZpZGVyIiwiZXhwIjoxNTA4OTI0NDAwLCJpYXQiOjE1MDYzMzI0MDAsImp0aSI6ImEwMWNmYTBkZjJlYjI2NWYzOTQ1NTkxYmMyOGY3MWEzNTg5ZDE3NjZlYmI4MmRhYTBjYTFhOGIwNzJkNzI1ODk0OWJmOTZkMTUyOTJjNTFmYWNmNGFkZDNkMDZjMDQ2YjExYmRjNmI2Yjc2YTYwNmZkN2JmMTI2MzQ4NWZhZGNhYzU0NjExMTU2NGNhNGNiMjhiZTg5MGNlNDY5MjMyY2QyNmI5ZmIzMTdhZTVhZmQ1NjE0NWQzOGExODg1MzdkZTUxMDMxYWQwYmY4YTY3YjNlNzVjMzkwNTVkZDUxNTQzZDY0ODNkNzc4OGEwOTQwMWY4YWQ0MjEyNTNhYmI3ZDEifQ.AzOxuj3DBELmFyphOJQxAlodA3PzDeBN6x4G5qO1H5s",
            "expiresAt": "2017-10-25T09:40:00",
            "userId": 42
        }

### Discard an auth token [POST /auth/token/discard]

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)


## Group Task

A `Task` is the unit of work that is displayed in a cohesive view on a mobile device. It consists of several
`Components` which can be _interactive_ (like a `TextInput`) or _non-interactive_ (like an `Image`).
Interactive components will produce results while the non-interactive ones won't. For an overview of all
available components check out the [Components Overview](reference/components-overview).

## The task object [/tasks]

+ Attributes (RESPONSETask)

### List all Tasks [GET /tasks{?order}{?limit}{?search}{?before}{?after}]

+ Parameters

    + order (array[string], optional)
        
        + Members
            
            + id
            
            + name
            
            + lastModifiedAt
            
            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.
    
    + search (string, optional) - search for full word matches
    
    + before (number, optional) - fetch only elements before the one with this `id`
    
    + after (number, optional) - fetch only elements after the one with this `id`

+ Request

    + Headers
        
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSETaskList)

### Create a Task [POST]

+ Request (application/json)

    + Attributes (REQUESTTask)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSETask)
   
   
### Update a Task [PUT /tasks/{id}]

+ Parameter

    + id (number) - id of the task

+ Request (application/json)

    + Attributes (REQUESTTask)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSETask)
    
    
### Delete a Task [DELETE /tasks/{id}]

+ Parameter

    + id (number) - id of the task

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)
    
    
## Group Job

A `Job` is the unit of work a worker gets paid for. It is a sequence of `Tasks`.

## The job object [/jobs]

+ Attributes (RESPONSEJob)

### List all Jobs [GET /jobs{?order}{?limit}{?search}{?before}{?after}]

+ Parameters

    + order (array[string], optional)
        
        + Members
            
            + id
            
            + name
            
            + lastModifiedAt
            
            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.
    
    + search (string, optional) - search for full word matches
    
    + before (number, optional) - fetch only elements before the one with this `id`
    
    + after (number, optional) - fetch only elements after the one with this `id`

+ Request

    + Headers
        
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEJobList)

### Create a Job [POST]

+ Request (application/json)

    + Attributes (REQUESTJob)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSEJob)
   
   
### Update a Job [PUT /jobs/{id}]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Attributes (REQUESTJob)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSEJob)
    
    
### Delete a Job [DELETE /jobs/{id}]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

# Tasks of a Job [/jobs/{id}/tasks]

You can add, update and get the tasks of a job.

### List Tasks of a Job [GET /jobs/{id}/tasks]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

        + Attributes (array[number])

### Add Tasks to a Job [POST /jobs/{id}/tasks]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Attributes (array[number])

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Update Tasks of a Job [PUT /jobs/{id}/tasks]

+ Parameter

    + id (number) - id of the job

+ Request (application/json)

    + Attributes (array[number])

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

## Group Campaign

A `Campaign` is a collection of `Jobs`. It defines under which conditions its jobs are published
to our job market. If you want to make a `Job` avauilable for our workers, you first need to add it to 
a campaign first and publish this campaign to our Job Market.

## The campaign object [/campaigns]

+ Attributes (RESPONSECampaign)

### List all Campaigns [GET /campaigns{?order}{?limit}{?search}{?before}{?after}]

+ Parameters

    + order (array[string], optional)
        
        + Members
            
            + id
            
            + name
            
            + lastModifiedAt
            
            + createdAt

    + limit (number, optional) - the number of elements being fetched. Limit can range between 1 and 100 elements. Default is 10.
    
    + search (string, optional) - search for full word matches
    
    + before (number, optional) - fetch only elements before the one with this `id`
    
    + after (number, optional) - fetch only elements after the one with this `id`

+ Request

    + Headers
        
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (RESPONSECampaignList)

### Create a Campaign [POST]

+ Request (application/json)

    + Attributes (REQUESTCampaign)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 201 (application/json)

    + Attributes (RESPONSECampaign)
    
    
### Delete a Campaign [DELETE /camapigns/{id}]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

# Jobs of a Campaign [/campaigns/{id}/jobs]

You can add, update and get the jobs of a campaign.

### List Jobs of a Campaign [GET /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

        + Attributes (array[number])

### Add Jobs to a Campaign [POST /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Attributes (array[number])

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Update Jobs of a Campaign [PUT /campaigns/{id}/jobs]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Attributes (array[number])

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

# Campaign Lifecycle [/campaigns/{id}]

The `Campaign`s state manages the availability of it's jobs on our Job Market.

Initially, a `Campaign` is inactive. After you added Jobs to it, you can publish it to our Job Market which will set its state to `active`.
When the `Campaign` is active, its Jobs are available on our Job Market and Workers can work on them by that
generating results. You can `pause` an active campaign and continue its afterwards.When all results for
a Campaign  have been generated, the campaign is set to `finished`.

It is also possible to `cancel` a campaign after it has been published.

![test](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/CampaignStates+(1).svg)

### Publish a Campaign [POST /camapigns/{id}/publish]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Pause an active Campaign [POST /camapigns/{id}/pause]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Continue a paused Campaign [POST /camapigns/{id}/continue]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

### Cancel a published Campaign [POST /camapigns/{id}/cancel]

+ Parameter

    + id (number) - id of the campaign

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)


## Group Result

You can get the results that have been generated by the workers for the Jobs of a campaign. The results will
be `in review` after they have been uploaded for as long as defined by the `maxReviewTime` in the `Campaign`.
After that time, the result will get auto-approved and the worker paid.

You can also `reject` a result when you can give a reason to the worker. In that case, the worker won't get paid
and his reputation gets damaged.

You can also ask a worker to redo the Job with a `soft-reject`. By that, te result will be rejected and the worker will be ask to
do the Job again. This will have no effect on the worker's reputation.

## The result object [/results]

+ Attributes (RESPONSEJobResult)

### List all Results for a Campaign [GET /campaigns/{id}/results]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token

+ Response 200 (application/json)

    + Attributes (array[RESPONSEJobResult])

### Approve a Result [POST /results/{id}/approve]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token
            
    + Attributes (REQUESTApprove)

+ Response 200 (application/json)

### Reject a Result [POST /results/{id}/reject]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token
        
    + Attributes (REQUESTReject)

+ Response 200 (application/json)

### Soft-reject a Result [POST /results/{id}/soft-reject]

+ Parameter

    + id (number) - id of the result

+ Request (application/json)

    + Headers
    
            X-API-Version: 1.0
            X-Auth-Token: token
            
    + Attributes (REQUESTSoftReject)

+ Response 200 (application/json)

    
# Group Components Overview

Here you can see the all currently supported components that you can use to build your Tasks.
The components will be shown below each other in the Task.

**Interactive Components**
* AdvancedImageMarker
* BinaryChoice
* Rating
* SimpleImageMarker
* TextInput
* Toggle
* VideoRecording

**Non-Interactive Components**
* Image
* Video

# Interactive Components

Interactive Components require the worker's input. These components will generate the results that
can be fetched later on.



## AdvancedImageMarker

The `AdvancedImageMarker` let's the worker draw on an image. For that, he has a shifted marker
so that he does not draw with his fingertip directly and can better see what he's drawing. He
can adjust the size of that marker and also use it as an eraser. Rotating the phone will enable
a landscape mod e. This version of the ImageMarker will allow the worker to draw more precisely
than with the `SimpleImageMarker` which in contrast is less complex to use.

### Example

![AdvancedImageMarker](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/AdvancedImageMarker.gif)

This example uses the following input image and would generate the following result:

| input      | result    |
|:-----------|-----------|
| ![a](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/ImageMarkerSampleImage.png)  | ![AdvancedImageMarkerResult](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/AdvancedImageMarkerResult.png)|


### Attributes

| name       | type    | description |
|:-----------|-----------|-----------|
| `url`      | string  | url of the image |

### Result

| name   | type    | description                 |
|:-------|---------|-----------------------------|
| `url`  | string  | url of the drawing (as a `.png`) |




## BinaryCoice

A `BinaryChoice` will display two labelled buttons to the worker. The worker can only select 
one of them.

### Example

![BinaryChoice](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/BinaryChoice.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `option1`  | string  | label for first  button      |
| `option2`  | string  | label for the other button   |

### Result

| name              | type    | description     |
|:------------------|---------|-----------------|
| `selectedOption`  | string  | selected Option |



## Rating

A `Rating` component displays a simple Rating bar to the user. The worker must select at least one star.
You can set the number of stars and if the worker can alsos elect half stars.

### Example

![Rating](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/Rating.gif)


### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `steps`      | number  | number of stars            |
| `halfSteps`      | boolean  | whether the worker can select half stars            |

### Result

| name      | type    | description     |
|:----------|---------|-----------------|
| `rating`  | number  | rating          |



## SimpleImageMarker

The `SimpleImageMarker` let's the worker draw with his fingertap on an image directy. He can zoom,
redo and undo his changes and also use the landscape mode for his drawings. This ImageMarker  will
be more efficient than the `AdvancedImageMarker` when the accuracy of the drawing is less important to you.

### Example

![SimpleImageMarker](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/SimpleImageMarker.gif)

This example uses the following input image and would generate the following result:

| input      | result |
|:-----------|--------|
| ![a](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/ImageMarkerSampleImage.png)  | ![SimpleImageMarkerResult](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/SimpleImageMarkerResult.png)|

 
### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |

### Result

| name   | type    | description                 |
|:-------|---------|-----------------------------|
| `url`  | string  | url of the drawing (as a `.png`) |



## TextInput

A `TextInput` will ask a worker for a short text input via keyboard. You can set a `hint` that is displayed
in the input field before the worker starts typing.

### Example

![textInput](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/TextInput.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `hint`      | string  | text of the input field before typing             |

### Result

| name    | type    | description     |
|:--------|---------|-----------------|
| `text`  | string  | the worker's input |



## Toggle

A `Toggle` can be used to ask for a simple `true`/`false` on a label. It can be set to be toggled by default.


### Example

![Toggle](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/Toggle.gif)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `label`      | string  | label of the Toggle             |
| `checkedByDefaul`      | boolean  | the initial state of the Toggle             |
| `explanation`      | string  | an explanation for the worker. Shown as a Popup.             |

### Result

| name       | type    | description     |
|:-----------|---------|-----------------|
| `checked`  | boolean | whether worker checked the Toggle |



## VideoRecording

### Example

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |

### Result

| name   | type    | description               |
|:-------|---------|---------------------------|
| `url`  | string  | url of the recorded video |



# Non-interactive Components

## Image

A simple image that is displayed in the Task.

### Exmaple

![Image](https://s3.eu-central-1.amazonaws.com/swarmsblobstorage/APIDocComponents/Image.png)

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the image             |



## Video

A video that is displayed in the Task. You can set whehther it should start and repeat automatically
and whether the audio should be played. The worker can pause and replay the video.

### Example

### Attributes

| name       | type    | description                  |
|:-----------|---------|------------------------------|
| `url`      | string  | url of the video             |
| `autoplay` | boolean | whether the video should start playing automatically |
| `repeat`   | boolean | whether the video should repeat automatically        |
| `audio`    | boolean | whther the audio should be played                    |



            
# Data Structures

## DefaultAttributes

+ id: 1 (number) - id of the resource
+ readOnly: false (boolean) - indicates whether the resource can be modified
+ lastModifiedAt: `2017-08-02T13:58:24` (string) - the datetime of the last modification of the resource.
+ createdAt: `2017-08-02T13:58:24` (string) - the datetime of the creation of the resource.

## REQUESTTask (object)

+ name: My first Task (string) - name of the task
+ components (array[REQUESTComponent]) - components of the task

## RESPONSETask (object)

+ include REQUESTTask
+ Include DefaultAttributes

## REQUESTJob (object)

+ name: My first Job (string) - name of the job

## RESPONSEJob (object)

+ Include REQUESTJob
+ Include DefaultAttributes

## REQUESTCampaign (object)

+ name: My first Campaign (string) - name of the campaign
+ title: Review model images (string) - title for jobs in this campaign on the job market
+ description: You will see 20 models images which you should rate on a 1 to 5 scale. (string, optional) - description for jobs in this campaign on the job market
+ terms: Don't tell anyone about this. (string, optional) - title for jobs in this campaign on the job market
+ estDuration: 10 sec (string) - estimated duration for jobs in this campaign
+ workerPayment: 0.01 (number) - payment (in USD) for workers who work on jobs in this campaign
+ results: 3 (number) - number of results that should be generated for each job of the campaign
+ maxResultsPerWorker: 1 (number) - number of times a single worker can work on each job of the campaign
+ workerGroup: 1 (number, optional) - id of a workergroup to specify the workers that can work on jobs in this campaign
+ maxWorkTime: 10 min (string, optional) - time a worker has to work on a job of this campaign
+ maxUploadTime: 4 hours (string, optional) -  time a worker has to uplaod the results after finishing his work
+ maxReviewTime: 3 hours - (string, optional) - timeframe in which results can be (soft-) rejected before they get auto approved


## RESPONSECampaign (object)

+ Include REQUESTCampaign
+ Include DefaultAttributes

## RESPONSETaskResult (object)
+ task (number)
+ startedAt (string)
+ completedAt (string)
+ componentResults (array[RESPONSEComponentResult])

## RESPONSEJobResult (object)

+ worker (number)
+ job (number)
+ startedAt (string)
+ completedAt (string)
+ state (enum)
    + InReview
    + Approved
    + Rejected
+ componentResults (array[RESPONSETaskResult])
+ id (number)

## ComponentData

+ One of

    + Properties
        + landscape (boolean)
        + minDurationInSeconds (number)
        + maxDurationInSeconds (number)
    + url (string)
    + hint (string)
    + text (string)
    + Properties
        + option1 (string)
        + option2 (string)
    + Properties
        + steps (number)
        + halfSetps (boolean)
    + Properties
        + min (number)
        + max (number)
        + steps (number)
        + start (number)
    + Properties
        + label (string)
        + checkedByDefault (boolean)
    + Properties
        + url (string)
        + autoplay (boolean)
        + repeat (boolean)


## REQUESTComponent (object)

+ type (enum) - depending on the type, different values must be set
    + BinaryChoice (string)
    + Image (string)
    + ImageMarker (string)
    + Instruction (string)
    + Question (string)
    + Rating (string)
    + Stepper (string)
    + TextInput (string)
    + Toggle (string)
    + Video (string)
    + VideoRecording (string)
    
+ sticky (boolean, optional) - whether the component should stick at the top of the screen on scrolling. Defaults to `false`
+ Include ComponentData

## RESPONSEComponent (REQUESTComponent)

+ sticky (boolean, required) - whether the component should stick at the top of the screen on scrolling
+ Include ComponentData

## ComponentResultData
+ One of

    + url (string)
    + selectedOption (string)
    + accepted (boolean)
    + rating (number)
    + result (number)
    + text (string)
    + checked (boolean)
    
    
## REQUESTComponentResult (object)

+ type (enum) - depending on the type of the component
    + AdvancedImageMarkerResult (string)
    + BinaryChoiceResult (string)
    + RatingResult (string)
    + SimpleImageMarkerResult (string)
    + StepperResult (string)
    + TextInputResult (string)
    + ToggleResult (string)
    + VideoRecordingResult (string)
    
+ Include ComponentResultData

## RESPONSEComponentResult (REQUESTComponentResult)

## HATEAOSLink (object)

+ href (string)

## PaginationLinks (object)

+ next (HATEAOSLink) - url of the next page
+ previous (HATEAOSLink) - url of the previous page

## RESPONSETaskList (object)

+ _links (PaginationLinks)
+ tasks (array[RESPONSETask])

## RESPONSEJobList (object)

+ _links (PaginationLinks)
+ jobs (array[RESPONSEJob])

## RESPONSECampaignList (object)

+ _links (PaginationLinks)
+ campaigns (array[RESPONSECampaign])

## REQUESTApprove (object)

+ message (string, optional) - an optional message for the worker

## REQUESTReject (object)

+ reason (string, required) - a reason for the rejection that is displayed to the worker

## REQUESTSoftReject (object)

+ reason (string, required) - a reason for the rejection that is displayed to the worker
+ until (string, required) - timestamp until when the worker can redo the job